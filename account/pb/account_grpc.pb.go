// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: account.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountService_PostAccountBuyer_FullMethodName    = "/proto.AccountService/PostAccountBuyer"
	AccountService_PostAccountSeller_FullMethodName   = "/proto.AccountService/PostAccountSeller"
	AccountService_UpdateAccountSeller_FullMethodName = "/proto.AccountService/UpdateAccountSeller"
	AccountService_UpdateAccountBuyer_FullMethodName  = "/proto.AccountService/UpdateAccountBuyer"
	AccountService_GetAccountBuyer_FullMethodName     = "/proto.AccountService/GetAccountBuyer"
	AccountService_GetAccountSeller_FullMethodName    = "/proto.AccountService/GetAccountSeller"
	AccountService_GetAccountSellers_FullMethodName   = "/proto.AccountService/GetAccountSellers"
	AccountService_LoginAccount_FullMethodName        = "/proto.AccountService/LoginAccount"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	PostAccountBuyer(ctx context.Context, in *PostAccountBuyerRequest, opts ...grpc.CallOption) (*PostAccountBuyerResponse, error)
	PostAccountSeller(ctx context.Context, in *PostAccountSellerRequest, opts ...grpc.CallOption) (*PostAccountSellerResponse, error)
	UpdateAccountSeller(ctx context.Context, in *AccountSeller, opts ...grpc.CallOption) (*AccountSeller, error)
	UpdateAccountBuyer(ctx context.Context, in *AccountBuyer, opts ...grpc.CallOption) (*AccountBuyer, error)
	GetAccountBuyer(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*AccountBuyer, error)
	GetAccountSeller(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*AccountSeller, error)
	GetAccountSellers(ctx context.Context, in *GetAccountSellersRequest, opts ...grpc.CallOption) (*GetAccountSellersResponse, error)
	LoginAccount(ctx context.Context, in *LoginAccountRequest, opts ...grpc.CallOption) (*LoginAccountResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) PostAccountBuyer(ctx context.Context, in *PostAccountBuyerRequest, opts ...grpc.CallOption) (*PostAccountBuyerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostAccountBuyerResponse)
	err := c.cc.Invoke(ctx, AccountService_PostAccountBuyer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) PostAccountSeller(ctx context.Context, in *PostAccountSellerRequest, opts ...grpc.CallOption) (*PostAccountSellerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostAccountSellerResponse)
	err := c.cc.Invoke(ctx, AccountService_PostAccountSeller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAccountSeller(ctx context.Context, in *AccountSeller, opts ...grpc.CallOption) (*AccountSeller, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountSeller)
	err := c.cc.Invoke(ctx, AccountService_UpdateAccountSeller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAccountBuyer(ctx context.Context, in *AccountBuyer, opts ...grpc.CallOption) (*AccountBuyer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountBuyer)
	err := c.cc.Invoke(ctx, AccountService_UpdateAccountBuyer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountBuyer(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*AccountBuyer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountBuyer)
	err := c.cc.Invoke(ctx, AccountService_GetAccountBuyer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountSeller(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*AccountSeller, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountSeller)
	err := c.cc.Invoke(ctx, AccountService_GetAccountSeller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountSellers(ctx context.Context, in *GetAccountSellersRequest, opts ...grpc.CallOption) (*GetAccountSellersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountSellersResponse)
	err := c.cc.Invoke(ctx, AccountService_GetAccountSellers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) LoginAccount(ctx context.Context, in *LoginAccountRequest, opts ...grpc.CallOption) (*LoginAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginAccountResponse)
	err := c.cc.Invoke(ctx, AccountService_LoginAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility.
type AccountServiceServer interface {
	PostAccountBuyer(context.Context, *PostAccountBuyerRequest) (*PostAccountBuyerResponse, error)
	PostAccountSeller(context.Context, *PostAccountSellerRequest) (*PostAccountSellerResponse, error)
	UpdateAccountSeller(context.Context, *AccountSeller) (*AccountSeller, error)
	UpdateAccountBuyer(context.Context, *AccountBuyer) (*AccountBuyer, error)
	GetAccountBuyer(context.Context, *GetAccountRequest) (*AccountBuyer, error)
	GetAccountSeller(context.Context, *GetAccountRequest) (*AccountSeller, error)
	GetAccountSellers(context.Context, *GetAccountSellersRequest) (*GetAccountSellersResponse, error)
	LoginAccount(context.Context, *LoginAccountRequest) (*LoginAccountResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountServiceServer struct{}

func (UnimplementedAccountServiceServer) PostAccountBuyer(context.Context, *PostAccountBuyerRequest) (*PostAccountBuyerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAccountBuyer not implemented")
}
func (UnimplementedAccountServiceServer) PostAccountSeller(context.Context, *PostAccountSellerRequest) (*PostAccountSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAccountSeller not implemented")
}
func (UnimplementedAccountServiceServer) UpdateAccountSeller(context.Context, *AccountSeller) (*AccountSeller, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountSeller not implemented")
}
func (UnimplementedAccountServiceServer) UpdateAccountBuyer(context.Context, *AccountBuyer) (*AccountBuyer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountBuyer not implemented")
}
func (UnimplementedAccountServiceServer) GetAccountBuyer(context.Context, *GetAccountRequest) (*AccountBuyer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBuyer not implemented")
}
func (UnimplementedAccountServiceServer) GetAccountSeller(context.Context, *GetAccountRequest) (*AccountSeller, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountSeller not implemented")
}
func (UnimplementedAccountServiceServer) GetAccountSellers(context.Context, *GetAccountSellersRequest) (*GetAccountSellersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountSellers not implemented")
}
func (UnimplementedAccountServiceServer) LoginAccount(context.Context, *LoginAccountRequest) (*LoginAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAccount not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}
func (UnimplementedAccountServiceServer) testEmbeddedByValue()                        {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_PostAccountBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAccountBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).PostAccountBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_PostAccountBuyer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).PostAccountBuyer(ctx, req.(*PostAccountBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_PostAccountSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAccountSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).PostAccountSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_PostAccountSeller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).PostAccountSeller(ctx, req.(*PostAccountSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateAccountSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountSeller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateAccountSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdateAccountSeller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateAccountSeller(ctx, req.(*AccountSeller))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateAccountBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountBuyer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateAccountBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdateAccountBuyer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateAccountBuyer(ctx, req.(*AccountBuyer))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAccountBuyer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountBuyer(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAccountSeller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountSeller(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountSellers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountSellersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountSellers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAccountSellers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountSellers(ctx, req.(*GetAccountSellersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_LoginAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).LoginAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_LoginAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).LoginAccount(ctx, req.(*LoginAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostAccountBuyer",
			Handler:    _AccountService_PostAccountBuyer_Handler,
		},
		{
			MethodName: "PostAccountSeller",
			Handler:    _AccountService_PostAccountSeller_Handler,
		},
		{
			MethodName: "UpdateAccountSeller",
			Handler:    _AccountService_UpdateAccountSeller_Handler,
		},
		{
			MethodName: "UpdateAccountBuyer",
			Handler:    _AccountService_UpdateAccountBuyer_Handler,
		},
		{
			MethodName: "GetAccountBuyer",
			Handler:    _AccountService_GetAccountBuyer_Handler,
		},
		{
			MethodName: "GetAccountSeller",
			Handler:    _AccountService_GetAccountSeller_Handler,
		},
		{
			MethodName: "GetAccountSellers",
			Handler:    _AccountService_GetAccountSellers_Handler,
		},
		{
			MethodName: "LoginAccount",
			Handler:    _AccountService_LoginAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
