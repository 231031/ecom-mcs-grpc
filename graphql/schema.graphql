scalar Time

enum RoleType {
  SELLER
  BUYER
}

interface BaseInfo {
    id: String!
    email: String!
    first_name: String!
    last_name: String!
    phone: String!
    address: String!
}

type AccountBuyer implements BaseInfo {
    token: String
    orders: [Order!]!

    id: String!
    email: String!
    first_name: String!
    last_name: String!
    phone: String!
    address: String!
}

type AccountSeller implements BaseInfo {
    token: String
    store_name: String!
    products: [Product!]!

    id: String!
    email: String!
    first_name: String!
    last_name: String!
    phone: String!
    address: String!
}

type Product {
    id: String!
    name: String!
    description: String!
    price: Float!
    quantity: Int!

    seller_id: String!
}

type OrderProduct {
    product: Product!
    quantity: Int!
}

type Order {
    id: String!
    account: AccountBuyer!
    products: [OrderProduct!]!
    total_price: Float!
    created_at: Time!
    address: String!
}

input PaginationInput {
    skip: Int!
    take: Int!
}

input BaseInfoInput {
    email: String!
    first_name: String!
    last_name: String!
    phone: String!
    address: String!
}

input AccountSellerInput {
    store_name: String!
    base_info: BaseInfoInput!
    password: String!
}

input AccountBuyerInput {
    base_info: BaseInfoInput!
    password: String!
}

input ProductInput {
    seller_id: String!
    name: String!
    description: String!
    price: Float!
    quantity: Int!
}

input OrderProductInput {
    product_id: String!
    quantity: Int!
}

input OrderInput {
    account_id: String!
    products: [OrderProductInput!]!
    address: String!
}

union LoginResult = AccountBuyer | AccountSeller

type Mutation {
    createAccountSeller(account: AccountSellerInput!): AccountSeller!
    updateAccountSeller(account: AccountSellerInput!, id: String!): AccountSeller!

    createAccountBuyer(account: AccountBuyerInput!): AccountBuyer!
    updateAccountBuyer(account: AccountBuyerInput!, id: String!): AccountBuyer!

    loginAccount(email: String!, password: String!, role: RoleType!): LoginResult!

    createProduct(product: ProductInput!): Product!
    updateProduct(product: ProductInput!, id: String!): Product!
    deleteProduct(id: String!): String!

    createOrder(order: OrderInput!): Order!
    deleteOrder(id: String!): String!
}

type Query {
    buyer(id: String!): AccountBuyer!
    sellers(pagination: PaginationInput, id: String): [AccountSeller!]!
    products(pagination: PaginationInput, query: String, id: String): [Product!]!
    orders(id: String): [Order!]!
}

